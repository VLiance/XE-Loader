 /*  -== XE-Loader ==-
 *
 *  Load [.exe .elf / .dll .so] from memory and remap functions
 *  Run your binaries on any x86 hardware
 *
 *  @autors
 *   - Maeiky
 *  
 * Copyright (c) 2021 - V·Liance
 *
 * The contents of this file are subject to the Apache License Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * If a copy of the Apache License Version 2.0 was not distributed with this file,
 * You can obtain one at https://www.apache.org/licenses/LICENSE-2.0.html
 *
* Description:
* 
* Remap system function to custom ones 
*
* Usefull declaration                ------------------------    decorated
//void __cdecl foo(void);            ----------------------->    _foo
//void __cdecl foo(int a);           ----------------------->    _foo
//void __cdecl foo(int a, int b);    ----------------------->    _foo
//void __stdcall foo(void);          ----------------------->    _foo@0
//void __stdcall foo(int a);         ----------------------->    _foo@4
//void __stdcall foo(int a, int b);  ----------------------->    _foo@8
//void __fastcall foo(void);         ----------------------->    @foo@0
//void __fastcall foo(int a);        ----------------------->    @foo@4
//void __fastcall foo(int a, int b); ----------------------->    @foo@8
*
*/


{"","__initenv" 	,(FUNC_) &__initenv }, 
{"","__p___initenv" ,(FUNC_) imp_p__initenv },
{"","_iob" 			,(FUNC_) iob }, 	
{"","_fmode" 		,(FUNC_) &_fmode_ }, 
{"","_commode" 		,(FUNC_) &_commode },
{"","__p__commode" 	,(FUNC_) &imp_p__commode }, 

/////////// CRT /////////////
{"",			"_initterm"  		,(FUNC_) imp_initterm },
{"",			"_initterm_e"  		,(FUNC_) imp_initterm_e },
{"",			"__set_app_type"	,(FUNC_) imp_set_app_type },
{"",			"__p__fmode"  		,(FUNC_) imp_p__fmode },
{"",			"__lconv_init"  	,(FUNC_) imp_lconv_init },
{"",			"_acmdln"  			,(FUNC_) &__acmdln },
{"",			"__p__acmdln"  		,(FUNC_) imp_p__acmdln },
{"",			"__getmainargs"  	,(FUNC_) imp_getmainargs },
{"",			"_environ"  		,(FUNC_) (char***)&_environ_ },
{"",			"__p__environ"  	,(FUNC_) imp_p__environ },


#ifdef HAVE_OPERATOR_NEW_INT
{"",			"_Znwj"  	,(FUNC_) _Znwj },//new
{"",			"_Znaj"  	,(FUNC_) _Znaj },//new
#endif
#ifdef HAVE_OPERATOR_NEW_LONG
{"",			"_Znwj"  	,(FUNC_) _Znwm },//TODO can we map int to long param?
{"",			"_Znaj"  	,(FUNC_) _Znam },//TODO can we map int to long param?
#endif
{"",			"_ZdlPv"  	,(FUNC_) _ZdlPv },//delete

{"",			"__cxa_finalize" ,(FUNC_)  imp_cxa_finalize }, //global destructor
{"",			"__divdi3"  		,(FUNC_) __divdi3 },


//{"",			"_Unwind_Resume"  	,(FUNC_) __unwind_resume  },

{"",			"GetProcAddress" 			,(FUNC_) imp_GetProcAddress }, 	//Special
{"",			"LoadLibraryA"    			,(FUNC_) imp_LoadLibraryA },  	//Special
{"",			"LoadLibraryW"    			,(FUNC_) imp_LoadLibraryW},  	//Special
{"",			"LoadLibraryExA"    		,(FUNC_) imp_LoadLibraryExA},  	//Special
{"",			"LoadLibraryExW"    		,(FUNC_) imp_LoadLibraryExW},  	//Special
{"",			"FreeLibrary"    			,(FUNC_) imp_FreeLibrary},  	
//{"LoadLibraryExW"  			,(FUNC_) LoadLibraryExW }, 			//TODO

{"",			"CommandLineToArgvW"  		,(FUNC_) imp_CommandLineToArgvW },
{"",			"GetCommandLineA"  			,(FUNC_) imp_GetCommandLineA },
{"",			"GetCommandLineW"  			,(FUNC_) imp_GetCommandLineW },
//{"chkstk"  					,(FUNC_) imp_chkstk },
#ifdef ImWin
//{"",			"chkstk"  					,(FUNC_) __chkstk }, //not in build x64
#endif

#ifdef USE_Platform_RegisterFrame
{"",			"__register_frame"  	,(FUNC_) __register_frame },
{"",			"__deregister_frame"  	,(FUNC_) __deregister_frame },
#else
{"",			"__register_frame"  	,(FUNC_) imp_register_frame },
{"",			"__deregister_frame"  	,(FUNC_) imp_deregister_frame },
#endif


#ifdef USE_Platform_AlignedAlloc
{"",			"_aligned_malloc"	,(FUNC_) _aligned_malloc },
{"",			"_aligned_realloc"	,(FUNC_) _aligned_realloc },
{"",			"_aligned_free"  	,(FUNC_) _aligned_free },
#else
{"",			"_aligned_malloc"	,(FUNC_) imp_aligned_malloc },
{"",			"_aligned_realloc"	,(FUNC_) imp_aligned_realloc },
{"",			"_aligned_free"  	,(FUNC_) imp_aligned_free },
#endif

/////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////// FUNC TABLE /////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////


#ifdef Func_Win 
{"",			"_onexit"  		,(FUNC_) _onexit },
#else
{"",			"_onexit"  		,(FUNC_) imp_onexit },
#endif

#ifdef Func_Win 
{"",			"___lc_codepage_func"  ,(FUNC_) ___lc_codepage_func },
#else
{"",			"___lc_codepage_func"  ,(FUNC_) imp_lc_codepage_func },
#endif

{"",			"localeconv"  	,(FUNC_) sys_localeconv },
{"",			"_isctype"  	,(FUNC_) imp_isctype },

/////////////////////////////

//{"wcscpy"  				,(FUNC_) wcscpy },
//{"GetModuleFileNameW"  	,(FUNC_) GetModuleFileNameW },
//{"_open"  				,(FUNC_) imp_open },

/*
{"",			"InitOnceExecuteOnce"  		,(FUNC_) InitOnceExecuteOnce },
{"",			"SleepConditionVariableCS"  	,(FUNC_) thread_SleepConditionVariableCS },
{"",			"InitializeConditionVariable"  ,(FUNC_) InitializeConditionVariable },
{"",			"WakeAllConditionVariable"  	,(FUNC_) WakeAllConditionVariable },
{"",			"WakeConditionVariable"  		,(FUNC_) thread_WakeConditionVariable },
*/

{"",			"CreateSemaphoreA"  		,(FUNC_) th_CreateSemaphoreA },
{"",			"CreateSemaphoreW"  		,(FUNC_) th_CreateSemaphoreW },
{"",			"WaitForSingleObject"  		,(FUNC_) th_WaitForSingleObject },
{"",			"ReleaseSemaphore"  		,(FUNC_) th_ReleaseSemaphore },


//////// Implemented ////////////////////////////////////////

{"",			"_strdup"  		,(FUNC_) imp_strdup },
{"",			"strncpy"  		,(FUNC_) imp_strncpy },
{"",			"isspace"  		,(FUNC_) imp_isspace },
{"",			"isupper"  		,(FUNC_ )imp_isupper },
{"",			"islower"  		,(FUNC_) imp_islower },

{"",			"_lock"  		,(FUNC_) imp_lock },
{"",			"_unlock"  		,(FUNC_) imp_unlock },


////////////////////////////////////////////////////////////

////// Special fn WGL ////////////////////////////////////
{"",			"GetPixelFormat"  		,(FUNC_) sys_GetPixelFormat }, 
{"",			"SetPixelFormat"  		,(FUNC_) sys_SetPixelFormat }, 
{"",			"ChoosePixelFormat"  	,(FUNC_) sys_ChoosePixelFormat },
{"",			"DescribePixelFormat"  	,(FUNC_) sys_DescribePixelFormat },
{"",			"SwapBuffers"  			,(FUNC_) sys_SwapBuffers },
////////////////////////////////////////////////////////////

///////////////// System //////////////
{"",			"GetDpiForMonitor"  		,(FUNC_) sys_GetDpiForMonitor }, //Shcore.dll
{"",			"SetProcessDpiAwareness"  	,(FUNC_) sys_SetProcessDpiAwareness }, //Shcore.dll
{"",			"SetProcessDPIAware"  		,(FUNC_) sys_SetProcessDPIAware }, //Shcore.dll
////////////////////////////////////////

{"",			"VirtualAlloc"  			,(FUNC_) sys_VirtualAlloc },
{"",			"VirtualFree"  				,(FUNC_) sys_VirtualFree },
{"",			"VirtualProtect"  			,(FUNC_) sys_VirtualProtect },
{"",			"HeapCreate"  				,(FUNC_) mem_HeapCreate },
{"",			"HeapAlloc"  				,(FUNC_) mem_HeapAlloc },
{"",			"HeapFree"  				,(FUNC_) mem_HeapFree },

{"",			"FlushInstructionCache"		,(FUNC_) sys_FlushInstructionCache },
	
{"",			"setvbuf"  					,(FUNC_) sys_setvbuf },
{"",			"_set_error_mode" 			,(FUNC_) sys_set_error_mode },

{"",			"RegisterClassA"  			,(FUNC_) sys_RegisterClassA }, 
{"",			"RegisterClassW"  			,(FUNC_) sys_RegisterClassW }, 
{"",			"UnregisterClassA"  		,(FUNC_) sys_UnregisterClassA }, 
{"",			"UnregisterClassW"  		,(FUNC_) sys_UnregisterClassW }, 
{"",			"UnregisterClassW"  		,(FUNC_) sys_UnregisterClassW }, 


{"",			"AdjustWindowRectEx"  		,(FUNC_) sys_AdjustWindowRectEx }, 

{"",			"DispatchMessageA"  		,(FUNC_) sys_DispatchMessageA }, 

{"",			"GetSystemInfo"  			,(FUNC_) sys_GetSystemInfo }, 
{"",			"GetNativeSystemInfo"  		,(FUNC_) sys_GetNativeSystemInfo }, 
{"",			"WindowFromDC"  			,(FUNC_) sys_WindowFromDC }, 
{"",			"ClientToScreen"  			,(FUNC_) sys_ClientToScreen }, 

{"",			"StretchDIBits"  			,(FUNC_) sys_StretchDIBits },

{"",			"CallNextHookEx"  			,(FUNC_) sys_CallNextHookEx },
{"",			"EnumDisplaySettingsA" 		,(FUNC_) sys_EnumDisplaySettingsA },

{"",			"CreateToolhelp32Snapshot"  ,(FUNC_) sys_CreateToolhelp32Snapshot },
{"",			"Thread32First"  			,(FUNC_) th_Thread32First },
{"",			"Thread32Next"  			,(FUNC_) th_Thread32Next },
{"",			"InterlockedIncrement"  	,(FUNC_) th_InterlockedIncrement },
{"",			"InterlockedDecrement"  	,(FUNC_) th_InterlockedDecrement },

{"",			"ShowWindow"  				,(FUNC_) sys_ShowWindow },

{"",			"SetWindowsHookExA" 		,(FUNC_) sys_SetWindowsHookExA },
{"",			"GetModuleHandleA" 			,(FUNC_) sys_GetModuleHandleA },
{"",			"GetModuleHandleW"  		,(FUNC_) sys_GetModuleHandleW },

{"",			"GetDC"  					,(FUNC_) sys_GetDC },
{"",			"CloseHandle"  				,(FUNC_) sys_CloseHandle },

{"",			"LoadCursorA" 				,(FUNC_) sys_LoadCursorA },
{"",			"LoadCursorW" 				,(FUNC_) sys_LoadCursorW },
{"",			"LoadIconA"   				,(FUNC_) sys_LoadIconA },
{"",			"LoadIconW"   				,(FUNC_) sys_LoadIconW },


{"",			"ScreenToClient"  			,(FUNC_) sys_ScreenToClient },
{"",			"WideCharToMultiByte"  		,(FUNC_) sys_WideCharToMultiByte },
{"",			"MultiByteToWideChar"  		,(FUNC_) sys_MultiByteToWideChar },

{"",			"GetCursorInfo"  			,(FUNC_) sys_GetCursorInfo },
{"",			"SetWindowPos"  			,(FUNC_) sys_SetWindowPos },

{"",			"MonitorFromRect" 			,(FUNC_) sys_MonitorFromRect },
{"",			"GetMonitorInfoW"  			,(FUNC_) sys_GetMonitorInfoW },

{"",			"OutputDebugStringA"  		,(FUNC_) sys_OutputDebugStringA },
{"",			"OutputDebugStringW"  		,(FUNC_) sys_OutputDebugStringW },

{"",			"GetConsoleWindow"  		,(FUNC_) sys_GetConsoleWindow },

{"",			"GetStdHandle"  						,(FUNC_) sys_GetStdHandle },
{"",			"GetConsoleScreenBufferInfo"			,(FUNC_) sys_GetConsoleScreenBufferInfo },


{"",			"InitializeCriticalSectionEx" 			,(FUNC_) sys_InitializeCriticalSectionEx },
{"",			"IsProcessorFeaturePresent" 			,(FUNC_) sys_IsProcessorFeaturePresent },
{"",			"InitializeCriticalSectionAndSpinCount"	,(FUNC_) sys_InitializeCriticalSectionAndSpinCount },

{"",			"InitializeSListHead"			,(FUNC_) sys_InitializeSListHead },

{"",			"setlocale"  				,(FUNC_) sys_setlocale },
{"",			"getenv"  					,(FUNC_) sys_getenv },
{"",			"_putenv"  					,(FUNC_) imp_putenv },

{"",			"IsDebuggerPresent"  	 	,(FUNC_) sys_IsDebuggerPresent },
{"",			"UnhandledExceptionFilter" 	,(FUNC_) sys_UnhandledExceptionFilter },

{"",			"GetCurrentProcess"  		,(FUNC_) sys_GetCurrentProcess },
{"",			"TerminateProcess"  		,(FUNC_) sys_TerminateProcess },
{"",			"GetStartupInoA"  			,(FUNC_) sys_GetStartupInfoA },
{"",			"GetStartupInoW"  			,(FUNC_) sys_GetStartupInfoW },

//Windows

{"",			"CreateWindowExA"  				,(FUNC_) sys_CreateWindowExA },
{"",			"CreateWindowExW"  				,(FUNC_) sys_CreateWindowExW },

{"",			"GetCurrentThread"  			,(FUNC_) th_GetCurrentThread },
{"",			"GetCurrentThreadId"  			,(FUNC_) sys_GetCurrentThreadId },
{"",			"GetThreadPriority"  			,(FUNC_) th_GetThreadPriority },


{"",			"InitializeCriticalSection" 	,(FUNC_) th_InitializeCriticalSection },
{"",			"EnterCriticalSection" 			,(FUNC_) th_EnterCriticalSection },
{"",			"TryEnterCriticalSection" 		,(FUNC_) th_TryEnterCriticalSection },
{"",			"LeaveCriticalSection" 			,(FUNC_) th_LeaveCriticalSection },
{"",			"DeleteCriticalSection" 		,(FUNC_) th_DeleteCriticalSection },


{"",			"Sleep"						,(FUNC_) th_Sleep },

{"",			"DuplicateHandle"  			,(FUNC_) sys_DuplicateHandle },



{"",			"_get_osfhandle"  			,(FUNC_) imp_get_osfhandle },
{"",			"_lseek"  					,(FUNC_) imp_lseek },
{"",			"_write"  					,(FUNC_) imp_write},
{"",			"_isatty"  					,(FUNC_) imp_isatty},


{"",			"_vsnprintf"  	,(FUNC_) imp_vsnprintf },
{"",			"_snwprintf"  	,(FUNC_) imp_snwprintf },
{"",			"fwprintf"  	,(FUNC_) imp_fwprintf },

{"",			"abort"  		,(FUNC_) imp_abort }, 

{"",			"_stricmp"  	,(FUNC_) imp_stricmp },


#ifdef USE_Platform_LocalAlloc
{"",			"LocalAlloc"  		,(FUNC_) LocalAlloc },
{"",			"LocalReAlloc"		,(FUNC_) LocalReAlloc },
{"",			"LocalSize"  		,(FUNC_) LocalSize },
{"",			"LocalFree"  		,(FUNC_) LocalFree },
#else
{"",			"LocalAlloc"  		,(FUNC_) imp_LocalAlloc },
{"",			"LocalReAlloc"		,(FUNC_) imp_LocalReAlloc },
{"",			"LocalSize"  		,(FUNC_) imp_LocalSize },
{"",			"LocalFree"  		,(FUNC_) imp_LocalFree },
#endif


#ifdef USE_Platform_ThreadStorage
{"",			"TlsAlloc"  		,(FUNC_) TlsAlloc },
{"",			"TlsGetValue" 		,(FUNC_) TlsGetValue },
{"",			"TlsSetValue"  		,(FUNC_) TlsSetValue },
{"",			"TlsFree"  			,(FUNC_) TlsFree },
#else
{"",			"TlsAlloc"  		,(FUNC_) th_TlsAlloc },
{"",			"TlsGetValue"  		,(FUNC_) th_TlsGetValue },
{"",			"TlsSetValue"  		,(FUNC_) th_TlsSetValue },
{"",			"TlsFree"  			,(FUNC_) th_TlsFree },
#endif

/*
{"",			"_write"  		,(FUNC_) fwrite }, //??
{"",			"_snwprintf"  	,(FUNC_) snprintf },//??
{"",			"wcscpy"  		,(FUNC_) strcpy },  //??
*/

{"",			"malloc"  	,(FUNC_) imp_malloc },
{"",			"calloc"  	,(FUNC_) imp_calloc },
{"",			"realloc"  	,(FUNC_) imp_realloc },
{"",			"free"  	,(FUNC_) imp_free },

{"",			"_beginthreadex"  	,(FUNC_) th_beginthreadex },
{"",			"_errno"  			,(FUNC_) &_errno_ },

//{"",			"strlen"  	,(FUNC_) strlen },
{"",			"strlen"  	,(FUNC_) imp_strlen }, //safer strlen
{"",			"strpbrk"  	,(FUNC_) imp_strpbrk }, 

/////////////////////////////////////////////
/////////// DIRECT MAPPING //////////////////
/// *safe enough for a direct replacement* ///
/////////////////////////////////////////////
/////////////////////////////////////////////

/////////// LOG ////////////////////

{"",			"fflush"  	,(FUNC_) imp_fflush },
{"",			"fwrite"  	,(FUNC_) imp_fwrite },

{"",			"printf"  			,(FUNC_) imp_printf },
{"",			"fprintf"  			,(FUNC_) imp_fprintf },
{"",			"sprintf"  			,(FUNC_) imp_sprintf },
{"",			"vsprintf"  		,(FUNC_) imp_vsprintf },
{"",			"_vscprintf"  		,(FUNC_) imp_vscprintf },

{"",			"putc"  	,(FUNC_) imp_putc },
{"",			"fputc"  	,(FUNC_) imp_fputc },
{"",			"puts"  	,(FUNC_) imp_puts },
{"",			"fputs"  	,(FUNC_) imp_fputs },
{"",			"putchar"	,(FUNC_) imp_putchar },

////////////////////////////////////

#ifdef USE_Direct_Mapping

{"",			"sscanf"  				,(FUNC_) sscanf },
{"",			"bsearch"  				,(FUNC_) bsearch },

{"",			"_snprintf"  		,(FUNC_) snprintf },
{"",			"vfprintf"  		,(FUNC_) vfprintf },
{"",			"scanf"  			,(FUNC_) scanf },


/////////// MEM ////////////////////
{"",			"memcmp"  		,(FUNC_) memcmp },
{"",			"memmove"  		,(FUNC_) memmove },
{"",			"memcpy"  		,(FUNC_) memcpy },
{"",			"memset"  		,(FUNC_) memset },
////////////////////////////////////

/////////// STRING ///////////////
{"",			"wcslen"  	,(FUNC_) wcslen_ },
//{"",			"wcstombs"  ,(FUNC_) imp_wcstombs },
{"",			"wcstombs"  ,(FUNC_) imp_wcstombs },


{"",			"isalnum"  ,(FUNC_) isalnum},
{"",			"isdigit"  ,(FUNC_) isdigit },
{"",			"tolower"  ,(FUNC_) tolower },


{"",			"strcmp"  	,(FUNC_) strcmp },
{"",			"stricmp"	,(FUNC_) stricmp },

{"",			"strcat"  	,(FUNC_) strcat },
{"",			"strchr"  	,(FUNC_) strchr },
{"",			"strcpy"  	,(FUNC_) strcpy },
{"",			"strncmp"  	,(FUNC_) strncmp },
{"",			"strtok"  	,(FUNC_) strtok },
{"",			"strtol"  	,(FUNC_) strtol },
//{"",			"time"  	,(FUNC_) time },
{"",			"strrchr"  	,(FUNC_) strrchr },
{"",			"srand"  	,(FUNC_) srand },
{"",			"atoi"  	,(FUNC_) atoi },

{"",			"strstr"  	,(FUNC_) strstr },
{"",			"memchr"  	,(FUNC_) memchr },
{"",			"strtoul"  	,(FUNC_) strtoul },

////////////////////////////////

/////////// CHAR ////////////////
{"",			"getc"  	,(FUNC_) getc },
{"",			"fgetc"  	,(FUNC_) fgetc },
{"",			"getchar"  	,(FUNC_) getchar },
{"",			"getch"  	,(FUNC_) getch },
/////////////////////////////////

/////////// MATH ////////////////
{"",			"floor"  	,(FUNC_) floor },
{"",			"pow"  		,(FUNC_) pow },
{"",			"ceil"  	,(FUNC_) ceil },
{"",			"ceil"  	,(FUNC_) ceil },
{"",			"fabs"  	,(FUNC_) fabs  }, 
{"",			"qsort"  	,(FUNC_) qsort },
{"",			"tan"  		,(FUNC_) tan },
{"",			"rand"  	,(FUNC_) rand },
{"",			"abs"  		,(FUNC_) imp_abs }, 
/////////////////////////////////

/////////// FILE ////////////////
{"",			"fopen"  	,(FUNC_) imp_fopen },
{"",			"fread"  	,(FUNC_) fread },
{"",			"fclose"  	,(FUNC_) fclose },
{"",			"fseek"  	,(FUNC_) fseek },
{"",			"ftell"  	,(FUNC_) ftell },
{"",			"rewind"  	,(FUNC_) rewind },
#endif

{"",			"_fileno"  					,(FUNC_) imp_fileno},
{"",			"_access"  					,(FUNC_) imp_access},
{"",			"signal"  					,(FUNC_) imp_signal},
{"",			"_open"  					,(FUNC_) imp_open},
{"",			"strerror"  				,(FUNC_) imp_strerror},
{"",			"exit"  					,(FUNC_) imp_exit},

{"",			"_stati64"  				,(FUNC_) imp_stati64},   //File info
{"",			"_fstati64"  				,(FUNC_) imp_fstati64},  //File info
{"",			"_read"  					,(FUNC_) imp_read},
{"",			"_close"  					,(FUNC_) imp_close},
{"",			"WriteFile"  				,(FUNC_) imp_WriteFile},

{"",			"_dup"  					,(FUNC_) imp_dup},
{"",			"_getpid"  					,(FUNC_) imp_getpid},

{"",			"clock"  					,(FUNC_) imp_clock },
{"",			"___mb_cur_max_func"  		,(FUNC_) imp_mb_cur_max_func },
{"",			"_cexit"  					,(FUNC_) imp_cexit },
